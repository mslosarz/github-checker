AWSTemplateFormatVersion: 2010-09-09

Description: API to ECS integration

Parameters:
  ProjectName:
    Type: String
    Default: demoapp
  DockerImage:
    Type: String
    Default: mendhak/http-https-echo:latest

Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public:
      CIDR: 10.0.0.0/24
    Private0:
      CIDR: 10.0.100.0/24
    Private1:
      CIDR: 10.0.101.0/24

Resources:

  #================================
  #   VPC
  #================================
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ SubnetConfig, VPC, CIDR ]

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ SubnetConfig, Public, CIDR ]
      MapPublicIpOnLaunch: true

  PrivateSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ SubnetConfig, Private0, CIDR ]
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ SubnetConfig, Private1, CIDR ]

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  NatGatewayAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAttachment.AllocationId
      SubnetId: !Ref PublicSubnet

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet0

  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  #================================
  #   Load Balancing
  #================================
  PrivateLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      GroupName: ALB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  EcsSecurityGroupIngressFromPrivateALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the private internal ALB
      GroupId: !Ref ContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PrivateLoadBalancerSG

  PrivateLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 30
      Subnets:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
      SecurityGroups:
        - !Ref PrivateLoadBalancerSG

  PrivateLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ELBTargetGroupPrivate
          Type: forward
      LoadBalancerArn: !Ref PrivateLoadBalancer
      Port: 8080
      Protocol: HTTP

  ELBTargetGroupPrivate:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - PrivateLoadBalancer
    Properties:
      TargetType: ip
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /hc
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 10
      VpcId: !Ref VPC
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 5
        - Key: slow_start.duration_seconds
          Value: 60

  #================================
  #   API GW
  #================================
  HttpApiVPCLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Properties:
      Name: !Sub ${ProjectName}-VpcLink
      SecurityGroupIds:
        - !Ref ContainerSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Body: # Should be loaded dynamically
        openapi: 3.0.0
        info:
          title: Github Checker
          description: Simple API to check user repositories
          version: 0.0.1
        paths:
          /user/{username}/repositories:
            get:
              summary: Returns a list or repositories without forks
              parameters:
                - $ref: '#/components/parameters/Accept'
                - $ref: '#/components/parameters/Username'
              responses:
                '200':
                  $ref: '#/components/responses/UserRepositoriesResponse'
                '404':
                  $ref: '#/components/responses/NotFound'
                '406':
                  $ref: '#/components/responses/NotAcceptable'
              x-amazon-apigateway-integration:
                payloadFormatVersion: 1.0
                connectionId: !Ref HttpApiVPCLink
                type: http_proxy
                httpMethod: GET
                uri: !GetAtt PrivateLoadBalancerListener.ListenerArn
                connectionType: VPC_LINK
        components:
          parameters:
            Accept:
              name: Accept
              in: header
              required: true
              schema:
                type: string
                enum:
                  - application/json
                  - application/xml
            Username:
              name: username
              in: path
              required: true
              schema:
                type: string

          responses:
            # Errors
            NotFound:
              description: Not found user
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorResponse'
            NotAcceptable:
              description: Not accepatable media type
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorResponse'

            # Responses
            UserRepositoriesResponse:
              description: Returns list of user repositories
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Repositories'

          schemas:
            ErrorResponse:
              type: object
              properties:
                status:
                  type: string
                Message: # TODO: dear God please ask them to keep same convention for all properties ;)
                  type: string

            Repositories:
              type: array
              items:
                $ref: '#/components/schemas/Repository'

            Repository:
              type: object
              properties:
                repositoryName:
                  type: string
                ownerLogin:
                  type: string
                branches:
                  type: array
                  items:
                    $ref: '#/components/schemas/Branch'

            Branch:
              type: object
              properties:
                name:
                  type: string
                lastCommitSha:
                  type: string
        # End of  Spec
  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: test
      ApiId: !Ref HttpApi
      AutoDeploy: true


  #================================
  #   ECS
  #================================
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${ProjectName}-repository

  GitHubKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: GitHub api token
      Name: !Sub ${ProjectName}-github-key

  ECSCluster:
    Type: AWS::ECS::Cluster

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref VPC

  ContainerSecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ContainerSecurityGroup
      SourceSecurityGroupId: !Ref ContainerSecurityGroup
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ecs.amazonaws.com ]
            Action: [ sts:AssumeRole ]
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AttachNetworkInterface
                  - ec2:CreateNetworkInterface
                  - ec2:CreateNetworkInterfacePermission
                  - ec2:DeleteNetworkInterface
                  - ec2:DeleteNetworkInterfacePermission
                  - ec2:Describe*
                  - ec2:DetachNetworkInterface

                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:DeregisterTargets
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:RegisterTargets
                Resource: '*'

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ecs-tasks.amazonaws.com ]
            Action: [ sts:AssumeRole ]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage

                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref GitHubKey

  AppTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole

  AppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      TaskRoleArn: !GetAtt AppTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: !Sub ${ProjectName}-Container
          Image: !Ref DockerImage
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          Secrets:
            - Name: github.key
              ValueFrom: !Ref GitHubKey
      NetworkMode: awsvpc
      Memory: 512
      Cpu: 256

  AppService:
    Type: AWS::ECS::Service
    DependsOn:
      - PrivateRoute
      - AppTaskDefinition
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref AppTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 2
      LoadBalancers:
        - ContainerName: !Sub ${ProjectName}-Container
          ContainerPort: 8080
          TargetGroupArn: !Ref ELBTargetGroupPrivate
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet0
            - !Ref PrivateSubnet1
          SecurityGroups:
            - !Ref ContainerSecurityGroup

Outputs:
  InvokeUrl:
    Description: Invoke URL for the HTTP API
    Value: !Sub https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/test
  EcrRepositoryUrl:
    Value: !GetAtt ECRRepository.RepositoryUri